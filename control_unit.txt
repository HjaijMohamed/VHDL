library ieee;
use ieee.std_logic_1164.all;

entity control_unit is
	port(	reset			:in std_logic;
			clock			:in std_logic;
			IR				:in std_logic_vector(7 downto 0);
			CCR_Result	:in std_logic_vector(3 downto 0);
	
			IR_Load		:out std_logic;
			MAR_Load		:out std_logic;
			PC_Load		:out std_logic;
			PC_inc		:out std_logic;
			A_Load		:out std_logic;
			B_Load		:out std_logic;
			ALU_Sel		:out std_logic_vector(2 downto 0);
			CCR_Load		:out std_logic;
			Bus2_Sel		:out std_logic_vector(1 downto 0);
			Bus1_Sel		:out std_logic_vector(1 downto 0);
			wr				:out std_logic
	);
end entity;



architecture arch_control_unit of control_unit is
type state_type is
	(	S_FETCH_0,S_FETCH_1,S_FETCH_2
		S_DECODE_3,
		S_LDA_IMM_4,S_LDA_IMM_5,S_LDA_IMM_6,
		S_LDA_DIR_4,S_LDA_DIR_5,S_LDA_DIR_6,S_LDA_DIR_7,
		S_STA_DIR_4,S_STA_DIR_5,S_STA_DIR_6,S_STA_DIR_7,S_STA_DIR_8,
		S_ADD_AB_4,
		S_BRA_4,S_BRA_5,S_BRA_6,
		S_BEQ_4,S_BEQ_5,S_BEQ_6,S_BEQ_7)
	);
signal current_state,next_state : state_type;

begin

	STATE_MRMORY:process(clock,reset)
		begin	
			if(reset='0') then
				current_state<=S_FETCH_0;
			elsif(clock'event and clock='1') then
				current_state<=next_state;
			end if;
		end process;

	NEXT_STATE_LOGIC:process(current_state,IR,CCR_Result)
		begin
			if(current_state=S_FETCH_0) then
				next_state<=S_FETCH_1;
			elsif(current_state=S_FETCH_1)then
				next_state<=S_FETCH_2;
			elsif(current_state=S_FETCH_2) then
				next_state<=S_DECODE_3;
			elsif(current_state=S_DECODE_3) then
				if(IR=LDA_IMM) then
					next_state<=S_LDA_IMM_4;
				elsif(IR=LDA_DIR)then
					next_state<=S_STA_DIR_4;
				elsif(IR=ADD_AB) then 
					next_state<=S_ADD_AB_4;
				elsif(IR=BRA)then
					next_state<=S_BRA_4;
				elsif(IR=BEQ and IR=CCR_Result(2)='1') then
					next_state<=S_BEQ_4;
				elsif(IR=BEQ and IR=CCR_Result(2)='0') then
					next_state <=S_BEQ_7;
				else
					next_state<=S_FETCH_0;
				end if;
			elsif..
			...
			...
			...
			.
			end if;
		end process;
		
	OUTPUT_LOGIC : process(current_state)
		begin
			case(current_state)is
				when S_FETCH_0 =>
					IR_Load	<= '0';
					MAR_Load	<= '1';
					PC_Load	<='0';
					PC_inc	<='0';
					A_Load	<='0';
					B_Load	<='0';
					ALU_Sel	<='000';
					CCR_Load	<='0';
					Bus1_Sel	<='00';
					Bus2_Sel	<='01';
					wr			<='0';
				when S_FETCH_1 =>
					IR_Load	<= '0';
					MAR_Load	<= '0';
					PC_Load	<='0';
					PC_inc	<='1';
					A_Load	<='0';
					B_Load	<=	'0';
					ALU_Sel	<='000';
					CCR_Load	<='0';
					Bus1_Sel	<='00';
					Bus2_Sel	<=	'00';
					wr			<='0';
				....
				end case;
			end process;
		
		

end architecture;	
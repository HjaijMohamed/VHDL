library ieee;
use ieee.std_logic_1164.all;
use work.all;

entity memory is
	port(	reset			:in std_logic;
			clock			:in std_logic;
			wr				:in std_logic;
			address		:in std_logic_vector(7 downto 0);
			data_in		:in std_logic_vector(7 downto 0);
			
			port_in_00	:in std_logic_vector(7 downto 0);
			port_in_01	:in std_logic_vector(7 downto 0);
			port_in_02	:in std_logic_vector(7 downto 0);
			port_in_03	:in std_logic_vector(7 downto 0);
			port_in_04	:in std_logic_vector(7 downto 0);
			port_in_05	:in std_logic_vector(7 downto 0);
			port_in_06	:in std_logic_vector(7 downto 0);
			port_in_07	:in std_logic_vector(7 downto 0);
			port_in_08	:in std_logic_vector(7 downto 0);
			port_in_09	:in std_logic_vector(7 downto 0);
			port_in_10	:in std_logic_vector(7 downto 0);
			port_in_11	:in std_logic_vector(7 downto 0);
			port_in_12	:in std_logic_vector(7 downto 0);
			port_in_13	:in std_logic_vector(7 downto 0);
			port_in_14	:in std_logic_vector(7 downto 0);
			port_in_15	:in std_logic_vector(7 downto 0);
			
			port_out_00	:out std_logic_vector(7 downto 0);
			port_out_01	:out std_logic_vector(7 downto 0);
			port_out_03	:out std_logic_vector(7 downto 0);
			port_out_04	:out std_logic_vector(7 downto 0);
			port_out_05	:out std_logic_vector(7 downto 0);
			port_out_06	:out std_logic_vector(7 downto 0);
			port_out_07	:out std_logic_vector(7 downto 0);
			port_out_08	:out std_logic_vector(7 downto 0);
			port_out_09	:out std_logic_vector(7 downto 0);
			port_out_10	:out std_logic_vector(7 downto 0);
			port_out_11	:out std_logic_vector(7 downto 0);
			port_out_12	:out std_logic_vector(7 downto 0);
			port_out_13	:out std_logic_vector(7 downto 0);
			port_out_14	:out std_logic_vector(7 downto 0);
			port_out_15	:out std_logic_vector(7 downto 0);
			
			data_out 	:out std_logic_vector(7 downto 0)
	);

end entity;


architecture arch_memory of memory is
signal rom_data_out,rw_data_out:std_logic_vector(7 downto 0);

component rom_128x8_sync is
	port(
	clock:in std_logic ;
	address:in std_logic_vector(7 downto 0);
	data_out:out std_logic_vector(7 downto 0);
);
end component;
	
component rw_96x8_sync is
	port(
		clock :in std_logic;
		address :in std_logic_vector(7 downto 0);
		data_in :in std_logic_vector(7 downto 0);
		wr:in std_logic;
		data_out: out std_logic_vector(7 downto 0)
	);
end component;

component ports is
	port(	reset		:in std_logic;
			clock		:in std_logic;
			address 	:in std_logic_vector(7 downto 0);
			data_in 	:in std_logic_vector(7 downto 0);
			wr			:in std_logic;
			
			port_out_00	:out std_logic_vector(7 downto 0);
			port_out_01	:out std_logic_vector(7 downto 0);
			port_out_03	:out std_logic_vector(7 downto 0);
			port_out_04	:out std_logic_vector(7 downto 0);
			port_out_05	:out std_logic_vector(7 downto 0);
			port_out_06	:out std_logic_vector(7 downto 0);
			port_out_07	:out std_logic_vector(7 downto 0);
			port_out_08	:out std_logic_vector(7 downto 0);
			port_out_09	:out std_logic_vector(7 downto 0);
			port_out_10	:out std_logic_vector(7 downto 0);
			port_out_11	:out std_logic_vector(7 downto 0);
			port_out_12	:out std_logic_vector(7 downto 0);
			port_out_13	:out std_logic_vector(7 downto 0);
			port_out_14	:out std_logic_vector(7 downto 0);
			port_out_15	:out std_logic_vector(7 downto 0)
	);
end component;

component MUX is
		port(	address		:in std_logic_vector(7 downto 0);
			rom_data_out:in std_logic_vector(7 downto 0);
			rw_data_out	:in std_logic_vector(7 downto 0);
			port_in_00	:in std_logic_vector(7 downto 0);
			port_in_01	:in std_logic_vector(7 downto 0);
			port_in_02	:in std_logic_vector(7 downto 0);
			port_in_03	:in std_logic_vector(7 downto 0);
			port_in_04	:in std_logic_vector(7 downto 0);
			port_in_05	:in std_logic_vector(7 downto 0);
			port_in_06	:in std_logic_vector(7 downto 0);
			port_in_07	:in std_logic_vector(7 downto 0);
			port_in_08	:in std_logic_vector(7 downto 0);
			port_in_09	:in std_logic_vector(7 downto 0);
			port_in_10	:in std_logic_vector(7 downto 0);
			port_in_11	:in std_logic_vector(7 downto 0);
			port_in_12	:in std_logic_vector(7 downto 0);
			port_in_13	:in std_logic_vector(7 downto 0);
			port_in_14	:in std_logic_vector(7 downto 0);
			port_in_15	:in std_logic_vector(7 downto 0);
			
			data_out		:out std_logic_vector(7 downto 0)
	);
end component;
begin
rom :rom_128x8_sync 
	port map(clock,address,rom_data_out);

rw :rw_96x8_sync
	port map(clock ,address ,data_in ,wr,rw_data_out);

por_out :ports
		port map(	
			reset		,
			clock		,
			address 	,
			data_in 	,
			wr			,
			
			port_out_00	,
			port_out_01	,
			port_out_03	,
			port_out_04	,
			port_out_05	,
			port_out_06	,
			port_out_07	,
			port_out_08	,
			port_out_09	,
			port_out_10	,
			port_out_11	,
			port_out_12	,
			port_out_13	,
			port_out_14	,
			port_out_15	
	);
mux :MUX
		port(	
			address		,
			rom_data_out,
			rw_data_out	,
			port_in_00	,
			port_in_01	,
			port_in_02	,
			port_in_03	,
			port_in_04	,
			port_in_05	,
			port_in_06	,
			port_in_07	,
			port_in_08	,
			port_in_09	,
			port_in_10	,
			port_in_11	,
			port_in_12	,
			port_in_13	,
			port_in_14	,
			port_in_15	,
			
			data_out);

end architecture;
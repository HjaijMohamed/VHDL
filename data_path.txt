library ieee;
use ieee.std_logic_1164.all;

entity data_path is
	port(	reset		:in std_logic;
			clock		:in std_logic;
			from_memory	:in std_logic_vector(7 downto 0);
			Bus1_Sel :in std_logic_vector(1 downto 0);
			Bus2_Sel	:in std_logic_vector(1 downto 0);
			IR_Load	:in std_logic;
			MAR_Load	:in std_logic;
			PC_Inc	:in std_logic;
			PC_Load	:in std_logic;
			A_Load	:in std_logic;
			B_Load	:in std_logic;
			CCR_Load	:in std_logic;
			ALU_Sel	:in std_logic_vector(2 downto 0);
			
			
			address	:out std_logic_vector(7 downto 0);
			to_memory:out std_logic_vector(7 downto 0);
			IR			:out std_logic_vector(7 downto 0);
			CCR_Result:out std_logic_vector(3 downto 0)
	);
end entity;



architecture arch_data_path of data_path is

signal Bus1 ,Bus2 :std_logic_vector(7 downto 0); 
signal A,B,PC,MAR  :std_logic_vector(7 downto 0); 
signal ALU_Result :std_logic_vector(7 downto 0);
signal PC_uns :std_logic_vector(7 downto 0);
signal NZVC :std_logic_vector(3 downto 0);

begin
	
	MUX_BUS1:process(Bus1_Sel, PC,A,B)
		begin
			case (Bus1_Sel)is
				when "00" 	=>Bus1<= PC;
				when "01" 	=>Bus1<= A;
				when "10" 	=>Bus1<= B;
				when others =>Bus1<=x"00";
			end case;
		end process;
		
		MUX_BUS2:process(Bus2_Sel,ALU_Result,Bus1,from_memory)
		begin
			case (Bus2_Sel)is
				when "00" 	=>Bus2<= ALU_Result;
				when "01"	=>Bus2<= Bus1;
				when "10" 	=>Bus2<= from_memory;
				when others =>Bus2<=x"00";
			end case;
		end process;
	address<=MAR;
	to_memory<=Bus1;
	
	INSTRUCTION_REGISTRE :process(clock ,reset)
		begin
			if(reset='0')then	
				IR <= x"00";
			elsif(clock'event and clock='1') then	
				if(IR_Load='1') then
					IR	<=Bus2;
				end if;
			end if;
		end Process;
		
	MEMORY_ADDRESS_REGISTER:process(clock,reset)
		begin
			if(reset='0')then	
				MAR <= x"00";
			elsif(clock'event and clock='1') then	
				if(MAR_Load='1') then
					MAR  <=Bus2;
				end if;
			end if;
		end Process;
		
	PROGRAM_COUNTER:process(clock,reset)
		begin
			if(reset='0')then	
				PC_uns <= x"00";
			elsif(clock'event and clock='1') then	
				if(PC_Load='1') then
					PC_uns <=unsigned(Bus2);
				elsif(PC_Inc='1') then
					PC_uns <=PC_uns + 1;
				end if;
			end if;
		end Process;
	PC<=PC_uns;
	
	A_REGISTER :process(clock,reset)
		begin	
			if(reset ='0')then
				A<=x"00";
			elsif(clock'event and clock='1') then
				if(A_Load='1') then
					A<=Bus2;
				end if;
			end if;
		end process;
	
	B_REGISTER :process(clock,reset)
		begin	
			if(reset ='0')then
				B<=x"00";
			elsif(clock'event and clock='1') then
				if(B_Load='1') then
					B<=Bus2;
				end if;
			end if;
		end process;
		
	CONDITION_CODE_REGISTER:process(clock,reset)
		begin
			if(reset='0') then
				CCR_Result <=x"0";
			elsif(clock'event and clock='1') then
				if(CCR_Load='1') then
					CCR_Result <= NZVC;
				end if;
			end if;
		end process;
	
	ALU_PROCESS :process(A,B,ALU_Sel)
		variable Sum_uns : unsigned(8 downto 0);
		begin
			if(ALU_Sel='000') then 
				Sum_uns:=unsigned('0' & A)+ unsigned('0' & B);
				ALU_Result <=std_logic_vector(Sum_uns(7 downto 0));
				
				NZVC(3)<=Sum_uns(7);
				if(Sum_uns(7 downto 0)=x"00") then
					NZVC(2)<='1';
				else
					NZVC(2)<='0';
				end if;
	
				if((A(7)='0' and B(7)='0' and Sum_uns(7)='1')or
					(A(7)='1' and B(7)='1' and Sum_uns(7)='0')) then
					NZVC(1)<='1';
				else
					NZVC(1)<='0';
				end if;
				
				NZVC(0)<=Sum_uns(8);
				
			elsif(............)
			
			...........
			
			end if;
	
		end process;
	
	
	
	
	
end architecture;